// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StockWatchlist {
  id Int @id @default(autoincrement())
  code String
  lowerPrice Float?
  upperPrice Float?
  createdAt  DateTime   @default(now())
}

model WatchlistNotification {
  id Int @id @default(autoincrement())
  code String
  isSent Boolean
  createdAt  DateTime   @default(now())
}

model HSXMarket {
  id Int @id @default(autoincrement())
  code String @unique
  createdAt  DateTime   @default(now())

  @@index(fields: [code])
}

model UpcomMarket {
  id Int @id @default(autoincrement())
  code String @unique
  createdAt  DateTime   @default(now())

  @@index(fields: [code])
}

model HNXMarket {
  id Int @id @default(autoincrement())
  code String @unique
  createdAt  DateTime   @default(now())

  @@index(fields: [code])
}

model StockFilter {
  id Int @id @default(autoincrement())
  marketCap BigInt
  pe Float
  eps Float
  beta Float
  avgVolume10d Int
}

model VolumeWatchlist {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())

  code String
}

model VolumeWatchlistNotificationDaily {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())

  code String
  price BigInt @default(0)
  volume BigInt @default(0)
  totalDealValue BigInt @default(0)

  isNotificationSent Boolean @default(false)
  description String? @default("")
  riskLevel String? @default("")
}

model VolumeWatchlistNotificationRealtime {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())

  code String
  price BigInt @default(0)
  volume BigInt @default(0)
  totalDealValue BigInt @default(0)

  isNotificationSent Boolean @default(false)
  description String? @default("")
  riskLevel String? @default("")

  @@index(fields: [code, isNotificationSent, createdAt])
}

model PriceWatchlistNotificationRealtime {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())

  code String
  price BigInt @default(0)
  volume BigInt @default(0)
  totalDealValue BigInt @default(0)

  isNotificationSent Boolean @default(false)
  description String? @default("")
  riskLevel String? @default("")

  @@index(fields: [code, isNotificationSent, createdAt])
}

model HistoricalData {
  id Int @id @default(autoincrement())
  date String
  symbol String
  totalVolume Int
  dealVolume Int
  putthroughVolume Int
  putthroughValue Int
  propTradingNetDealValue Int @default(0)
  propTradingNetPTValue Int @default(0)
  propTradingNetValue Int @default(0)
  unit Int

  priceHigh Float
  priceLow Float
  priceOpen Float
  priceAverage Float
  priceClose Float
  priceBasic Float
  adjRatio Float
  sellForeignValue Float @default(0)
  buyForeignValue Float @default(0)

  currentForeignRoom BigInt @default(0)
  totalValue BigInt
  buyForeignQuantity BigInt @default(0)
  sellForeignQuantity BigInt @default(0)
  buyCount BigInt
  buyQuantity BigInt
  sellCount BigInt
  sellQuantity BigInt

  @@index(fields: [symbol])
}

model DatabricksHistoricalData {
  id Int @id @default(autoincrement())
  date DateTime @default(now())
  symbol String
  lookbackDays Int
  isGoodBuyingPoint Boolean
  reasons String?
  riskLevel String
}

model Investor {
  id Int @id @default(autoincrement())
  userId String @unique
  userName String
  createdAt  DateTime   @default(now())

  // Add relation to TickerSuggestion
  tickerSuggestions TickerSuggestion[]
}


model TickerSuggestion {
  id                 Int      @id @default(autoincrement())
  code               String
  userId             String
  postId             String
  postType           String
  createdAt          DateTime @default(now())
  isNotificationSent Boolean  @default(false)

  // Add relation to Investor
  investor           Investor @relation(fields: [userId], references: [userId])

  @@index(fields: [code, userId])
}

model TestTable {
  id Int @id @default(autoincrement())
  code String
  createdAt  DateTime   @default(now())
}
