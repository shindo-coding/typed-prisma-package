name: CI/CD Pipeline
on:
  push:
    branches: [main]
jobs:
  create_release_id:
    runs-on: self-hosted
    timeout-minutes: 20
    env:
      USE_RAND: ${{ inputs.use_rand && 'true' || 'false' }}
    # Map a step output to a job output
    outputs:
      tag: ${{ steps.create_id.outputs.DOCKER_TAG }}
    steps:
      - id: create_id
        run: |
          if [ "${USE_RAND}" == "true" ]
          then
            export DOCKER_TAG=$(openssl rand -hex 8)
          else
            export DOCKER_TAG=$(TZ="UTC" date +"%Y%m%d%H%M")
          fi
          echo "DOCKER_TAG=${DOCKER_TAG}" >> ${GITHUB_OUTPUT}

  package_docker:
    runs-on: self-hosted
    needs: ["create_release_id"]
    env:
      CI_REGISTRY_IMAGE: shindo806/database-migrator
      PROJECT_NAME: database-migrator
      EXPOSE_PORT: 80
      SCALE_MIN: 1
      SCALE_MAX: 1
      DOCKER_TAG: ${{ needs.create_release_id.outputs.tag }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        run: |
          docker build -t $CI_REGISTRY_IMAGE:$DOCKER_TAG .
          docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG

  deploy:
    runs-on: self-hosted
    needs: ["package_docker"]

    env:
      CI_REGISTRY_IMAGE: shindo806/database-migrator
      PROJECT_NAME: database-migrator
      EXPOSE_PORT: 80
      MEM_MIN: 64Mi
      CPU_MIN: 100m
      MEM_MAX: 256Mi
      CPU_MAX: 500m
      SCALE_MIN: 1
      SCALE_MAX: 1
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch Docker Tags
        id: fetch-latest-tag
        run: |
          # Fetch the JSON response from the Docker Hub
          response=$(curl -s "https://registry.hub.docker.com/v2/repositories/shindo806/${PROJECT_NAME}/tags")

          # Extract the tag names using jq
          tag=$(echo "$response" | jq -r '.results[0].name')

          # Print tags (for debugging purposes)
          echo "Tags:"
          echo "$tag"

          # Set the tags as an output
          echo "DOCKER_TAG=$tag" >> ${GITHUB_OUTPUT}

      - name: Substitute environment variables in template
        env:
          DOCKER_TAG: ${{ steps.fetch-latest-tag.outputs.DOCKER_TAG }}
        run: |
          envsubst < template.yaml > deployment.yaml
        shell: bash

      - name: Deploy to Kubernetes
        env:
          DOCKER_TAG: ${{ steps.fetch-latest-tag.outputs.DOCKER_TAG }}
        run: |
          cat deployment.yaml
          minikube kubectl -- apply -f deployment.yaml
          minikube kubectl -- rollout status deploy/$PROJECT_NAME
        shell: bash
